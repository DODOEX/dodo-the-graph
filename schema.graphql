type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal! # tradeVolume = SellBaseToken.payBase+BuyBaseToken.receiveBase
  tradeVolumeUSD: BigDecimal! # SellBaseToken.receiveQuote+BuyBaseToken.payQuote
  # untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal! # baseBalance + quoteBalance

  # derived prices
  # derivedETH: BigDecimal
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  baseToken: Token!
  quoteToken: Token!

  # reserve0: BigDecimal!
  # reserve1: BigDecimal!
  # totalSupply: BigDecimal!

  # derived liquidity
  # reserveETH: BigDecimal!
  # reserveUSD: BigDecimal!
  # trackedReserveETH: BigDecimal! # used for separating per pair reserves and global
  # Price in terms of the asset pair
  # token0Price: BigDecimal!
  # token1Price: BigDecimal!

  midPrice: BigDecimal!
  fee: BigDecimal!

  # lifetime volume stats
  volumeBaseToken: BigDecimal! # SellBaseToken.payBase+BuyBaseToken.receiveBase
  volumeQuoteToken: BigDecimal! # SellBaseToken.receiveQuote+BuyBaseToken.payQuote
  # volumeUSD: BigDecimal!
  # untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  # liquidityProviderCount: BigInt! # used to detect new exchanges
}

